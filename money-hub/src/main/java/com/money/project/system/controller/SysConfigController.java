package com.money.project.system.controller;import com.money.common.utils.poi.ExcelUtil;import com.money.framework.aspectj.lang.annotation.Log;import com.money.framework.aspectj.lang.enums.BusinessType;import com.money.framework.web.controller.BaseController;import com.money.framework.web.domain.AjaxResult;import com.money.framework.web.page.TableDataInfo;import com.money.project.system.domain.SysConfig;import com.money.project.system.service.ISysConfigService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletResponse;import java.util.List;@RestController@RequestMapping("/system/config")public class SysConfigController extends BaseController{    @Autowired    private ISysConfigService configService;    @PreAuthorize("@ss.hasPermi('system:config:list')")    @GetMapping("/list")    public TableDataInfo list(SysConfig config)    {        startPage();        List<SysConfig> list = configService.selectConfigList(config);        return getDataTable(list);    }    @Log(title = "Parameter management", businessType = BusinessType.EXPORT)    @PreAuthorize("@ss.hasPermi('system:config:export')")    @PostMapping("/export")    public void export(HttpServletResponse response, SysConfig config)    {        List<SysConfig> list = configService.selectConfigList(config);        ExcelUtil<SysConfig> util = new ExcelUtil<SysConfig>(SysConfig.class);        util.exportExcel(response, list, "parameter data");    }    @PreAuthorize("@ss.hasPermi('system:config:query')")    @GetMapping(value = "/{configId}")    public AjaxResult getInfo(@PathVariable Long configId)    {        return success(configService.selectConfigById(configId));    }    @GetMapping(value = "/configKey/{configKey}")    public AjaxResult getConfigKey(@PathVariable String configKey)    {        return success(configService.selectConfigByKey(configKey));    }    @PreAuthorize("@ss.hasPermi('system:config:add')")    @Log(title = "Parameter management", businessType = BusinessType.INSERT)    @PostMapping    public AjaxResult add(@Validated @RequestBody SysConfig config)    {        if (!configService.checkConfigKeyUnique(config))        {            return error("New parameters'" + config.getConfigName() + "'Failed, parameter key name already exists");        }        config.setCreateBy(getUsername());        return toAjax(configService.insertConfig(config));    }    @PreAuthorize("@ss.hasPermi('system:config:edit')")    @Log(title = "Parameter management", businessType = BusinessType.UPDATE)    @PutMapping    public AjaxResult edit(@Validated @RequestBody SysConfig config)    {        if (!configService.checkConfigKeyUnique(config))        {            return error("Change parameters'" + config.getConfigName() + "'Failed, parameter key name already exists");        }        config.setUpdateBy(getUsername());        return toAjax(configService.updateConfig(config));    }    @PreAuthorize("@ss.hasPermi('system:config:remove')")    @Log(title = "Parameter management", businessType = BusinessType.DELETE)    @DeleteMapping("/{configIds}")    public AjaxResult remove(@PathVariable Long[] configIds)    {        configService.deleteConfigByIds(configIds);        return success();    }    @PreAuthorize("@ss.hasPermi('system:config:remove')")    @Log(title = "Parameter management", businessType = BusinessType.CLEAN)    @DeleteMapping("/refreshCache")    public AjaxResult refreshCache()    {        configService.resetConfigCache();        return success();    }}