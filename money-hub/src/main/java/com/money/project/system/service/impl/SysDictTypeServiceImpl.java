package com.money.project.system.service.impl;import com.money.common.constant.UserConstants;import com.money.common.exception.ServiceException;import com.money.common.utils.DictUtils;import com.money.common.utils.StringUtils;import com.money.project.system.domain.SysDictData;import com.money.project.system.domain.SysDictType;import com.money.project.system.mapper.SysDictDataMapper;import com.money.project.system.mapper.SysDictTypeMapper;import com.money.project.system.service.ISysDictTypeService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.PostConstruct;import java.util.Comparator;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@Servicepublic class SysDictTypeServiceImpl implements ISysDictTypeService{    @Autowired    private SysDictTypeMapper dictTypeMapper;    @Autowired    private SysDictDataMapper dictDataMapper;        @PostConstruct    public void init()    {        loadingDictCache();    }        @Override    public List<SysDictType> selectDictTypeList(SysDictType dictType)    {        return dictTypeMapper.selectDictTypeList(dictType);    }        @Override    public List<SysDictType> selectDictTypeAll()    {        return dictTypeMapper.selectDictTypeAll();    }        @Override    public List<SysDictData> selectDictDataByType(String dictType)    {        List<SysDictData> dictDatas = DictUtils.getDictCache(dictType);        if (StringUtils.isNotEmpty(dictDatas))        {            return dictDatas;        }        dictDatas = dictDataMapper.selectDictDataByType(dictType);        if (StringUtils.isNotEmpty(dictDatas))        {            DictUtils.setDictCache(dictType, dictDatas);            return dictDatas;        }        return null;    }        @Override    public SysDictType selectDictTypeById(Long dictId)    {        return dictTypeMapper.selectDictTypeById(dictId);    }        @Override    public SysDictType selectDictTypeByType(String dictType)    {        return dictTypeMapper.selectDictTypeByType(dictType);    }        @Override    public void deleteDictTypeByIds(Long[] dictIds)    {        for (Long dictId : dictIds)        {            SysDictType dictType = selectDictTypeById(dictId);            if (dictDataMapper.countDictDataByType(dictType.getDictType()) > 0)            {                throw new ServiceException(String.format("%1 $s has been allocated and cannot be deleted", dictType.getDictName()));            }            dictTypeMapper.deleteDictTypeById(dictId);            DictUtils.removeDictCache(dictType.getDictType());        }    }        @Override    public void loadingDictCache()    {        SysDictData dictData = new SysDictData();        dictData.setStatus("0");        Map<String, List<SysDictData>> dictDataMap = dictDataMapper.selectDictDataList(dictData).stream().collect(Collectors.groupingBy(SysDictData::getDictType));        for (Map.Entry<String, List<SysDictData>> entry : dictDataMap.entrySet())        {            DictUtils.setDictCache(entry.getKey(), entry.getValue().stream().sorted(Comparator.comparing(SysDictData::getDictSort)).collect(Collectors.toList()));        }    }        @Override    public void clearDictCache()    {        DictUtils.clearDictCache();    }        @Override    public void resetDictCache()    {        clearDictCache();        loadingDictCache();    }        @Override    public int insertDictType(SysDictType dict)    {        int row = dictTypeMapper.insertDictType(dict);        if (row > 0)        {            DictUtils.setDictCache(dict.getDictType(), null);        }        return row;    }        @Override    @Transactional    public int updateDictType(SysDictType dict)    {        SysDictType oldDict = dictTypeMapper.selectDictTypeById(dict.getDictId());        dictDataMapper.updateDictDataType(oldDict.getDictType(), dict.getDictType());        int row = dictTypeMapper.updateDictType(dict);        if (row > 0)        {            List<SysDictData> dictDatas = dictDataMapper.selectDictDataByType(dict.getDictType());            DictUtils.setDictCache(dict.getDictType(), dictDatas);        }        return row;    }        @Override    public boolean checkDictTypeUnique(SysDictType dict)    {        Long dictId = StringUtils.isNull(dict.getDictId()) ? -1L : dict.getDictId();        SysDictType dictType = dictTypeMapper.checkDictTypeUnique(dict.getDictType());        if (StringUtils.isNotNull(dictType) && dictType.getDictId().longValue() != dictId.longValue())        {            return UserConstants.NOT_UNIQUE;        }        return UserConstants.UNIQUE;    }}