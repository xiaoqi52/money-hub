package com.money.project.system.controller;import com.money.common.utils.StringUtils;import com.money.common.utils.poi.ExcelUtil;import com.money.framework.aspectj.lang.annotation.Log;import com.money.framework.aspectj.lang.enums.BusinessType;import com.money.framework.web.controller.BaseController;import com.money.framework.web.domain.AjaxResult;import com.money.framework.web.page.TableDataInfo;import com.money.project.system.domain.SysDictData;import com.money.project.system.service.ISysDictDataService;import com.money.project.system.service.ISysDictTypeService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletResponse;import java.util.ArrayList;import java.util.List;@RestController@RequestMapping("/system/dict/data")public class SysDictDataController extends BaseController{    @Autowired    private ISysDictDataService dictDataService;    @Autowired    private ISysDictTypeService dictTypeService;    @PreAuthorize("@ss.hasPermi('system:dict:list')")    @GetMapping("/list")    public TableDataInfo list(SysDictData dictData)    {        startPage();        List<SysDictData> list = dictDataService.selectDictDataList(dictData);        return getDataTable(list);    }    @Log(title = "dictionary data", businessType = BusinessType.EXPORT)    @PreAuthorize("@ss.hasPermi('system:dict:export')")    @PostMapping("/export")    public void export(HttpServletResponse response, SysDictData dictData)    {        List<SysDictData> list = dictDataService.selectDictDataList(dictData);        ExcelUtil<SysDictData> util = new ExcelUtil<SysDictData>(SysDictData.class);        util.exportExcel(response, list, "dictionary data");    }        @PreAuthorize("@ss.hasPermi('system:dict:query')")    @GetMapping(value = "/{dictCode}")    public AjaxResult getInfo(@PathVariable Long dictCode)    {        return success(dictDataService.selectDictDataById(dictCode));    }        @GetMapping(value = "/type/{dictType}")    public AjaxResult dictType(@PathVariable String dictType)    {        List<SysDictData> data = dictTypeService.selectDictDataByType(dictType);        if (StringUtils.isNull(data))        {            data = new ArrayList<SysDictData>();        }        return success(data);    }        @PreAuthorize("@ss.hasPermi('system:dict:add')")    @Log(title = "dictionary data", businessType = BusinessType.INSERT)    @PostMapping    public AjaxResult add(@Validated @RequestBody SysDictData dict)    {        dict.setCreateBy(getUsername());        return toAjax(dictDataService.insertDictData(dict));    }        @PreAuthorize("@ss.hasPermi('system:dict:edit')")    @Log(title = "dictionary data", businessType = BusinessType.UPDATE)    @PutMapping    public AjaxResult edit(@Validated @RequestBody SysDictData dict)    {        dict.setUpdateBy(getUsername());        return toAjax(dictDataService.updateDictData(dict));    }        @PreAuthorize("@ss.hasPermi('system:dict:remove')")    @Log(title = "Dictionary Type", businessType = BusinessType.DELETE)    @DeleteMapping("/{dictCodes}")    public AjaxResult remove(@PathVariable Long[] dictCodes)    {        dictDataService.deleteDictDataByIds(dictCodes);        return success();    }}