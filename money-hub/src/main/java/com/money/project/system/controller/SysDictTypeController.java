package com.money.project.system.controller;import com.money.common.utils.poi.ExcelUtil;import com.money.framework.aspectj.lang.annotation.Log;import com.money.framework.aspectj.lang.enums.BusinessType;import com.money.framework.web.controller.BaseController;import com.money.framework.web.domain.AjaxResult;import com.money.framework.web.page.TableDataInfo;import com.money.project.system.domain.SysDictType;import com.money.project.system.service.ISysDictTypeService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletResponse;import java.util.List;@RestController@RequestMapping("/system/dict/type")public class SysDictTypeController extends BaseController{    @Autowired    private ISysDictTypeService dictTypeService;    @PreAuthorize("@ss.hasPermi('system:dict:list')")    @GetMapping("/list")    public TableDataInfo list(SysDictType dictType)    {        startPage();        List<SysDictType> list = dictTypeService.selectDictTypeList(dictType);        return getDataTable(list);    }    @Log(title = "Dictionary Type", businessType = BusinessType.EXPORT)    @PreAuthorize("@ss.hasPermi('system:dict:export')")    @PostMapping("/export")    public void export(HttpServletResponse response, SysDictType dictType)    {        List<SysDictType> list = dictTypeService.selectDictTypeList(dictType);        ExcelUtil<SysDictType> util = new ExcelUtil<SysDictType>(SysDictType.class);        util.exportExcel(response, list, "Dictionary Type");    }        @PreAuthorize("@ss.hasPermi('system:dict:query')")    @GetMapping(value = "/{dictId}")    public AjaxResult getInfo(@PathVariable Long dictId)    {        return success(dictTypeService.selectDictTypeById(dictId));    }        @PreAuthorize("@ss.hasPermi('system:dict:add')")    @Log(title = "Dictionary Type", businessType = BusinessType.INSERT)    @PostMapping    public AjaxResult add(@Validated @RequestBody SysDictType dict)    {        if (!dictTypeService.checkDictTypeUnique(dict))        {            return error("Failed to add dictionary" + dict.getDictName() + "dictionary type already exists");        }        dict.setCreateBy(getUsername());        return toAjax(dictTypeService.insertDictType(dict));    }        @PreAuthorize("@ss.hasPermi('system:dict:edit')")    @Log(title = "Dictionary Type", businessType = BusinessType.UPDATE)    @PutMapping    public AjaxResult edit(@Validated @RequestBody SysDictType dict)    {        if (!dictTypeService.checkDictTypeUnique(dict))        {            return error("Failed to update dictionary" + dict.getDictName() + "'dictionary type already exists");        }        dict.setUpdateBy(getUsername());        return toAjax(dictTypeService.updateDictType(dict));    }        @PreAuthorize("@ss.hasPermi('system:dict:remove')")    @Log(title = "Dictionary Type", businessType = BusinessType.DELETE)    @DeleteMapping("/{dictIds}")    public AjaxResult remove(@PathVariable Long[] dictIds)    {        dictTypeService.deleteDictTypeByIds(dictIds);        return success();    }        @PreAuthorize("@ss.hasPermi('system:dict:remove')")    @Log(title = "Dictionary Type", businessType = BusinessType.CLEAN)    @DeleteMapping("/refreshCache")    public AjaxResult refreshCache()    {        dictTypeService.resetDictCache();        return success();    }        @GetMapping("/optionselect")    public AjaxResult optionselect()    {        List<SysDictType> dictTypes = dictTypeService.selectDictTypeAll();        return success(dictTypes);    }}