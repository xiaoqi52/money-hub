package com.money.project.system.service.impl;import com.money.common.constant.CacheConstants;import com.money.common.constant.UserConstants;import com.money.common.core.text.Convert;import com.money.common.exception.ServiceException;import com.money.common.utils.StringUtils;import com.money.framework.redis.RedisCache;import com.money.project.system.domain.SysConfig;import com.money.project.system.mapper.SysConfigMapper;import com.money.project.system.service.ISysConfigService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.annotation.PostConstruct;import java.util.Collection;import java.util.List;@Servicepublic class SysConfigServiceImpl implements ISysConfigService{    @Autowired    private SysConfigMapper configMapper;    @Autowired    private RedisCache redisCache;    @PostConstruct    public void init()    {        loadingConfigCache();    }    @Override    public SysConfig selectConfigById(Long configId)    {        SysConfig config = new SysConfig();        config.setConfigId(configId);        return configMapper.selectConfig(config);    }    @Override    public String selectConfigByKey(String configKey)    {        String configValue = Convert.toStr(redisCache.getCacheObject(getCacheKey(configKey)));        if (StringUtils.isNotEmpty(configValue))        {            return configValue;        }        SysConfig config = new SysConfig();        config.setConfigKey(configKey);        SysConfig retConfig = configMapper.selectConfig(config);        if (StringUtils.isNotNull(retConfig))        {            redisCache.setCacheObject(getCacheKey(configKey), retConfig.getConfigValue());            return retConfig.getConfigValue();        }        return StringUtils.EMPTY;    }    @Override    public boolean selectCaptchaEnabled()    {        String captchaEnabled = selectConfigByKey("sys.account.captchaEnabled");        if (StringUtils.isEmpty(captchaEnabled))        {            return true;        }        return Convert.toBool(captchaEnabled);    }    @Override    public List<SysConfig> selectConfigList(SysConfig config)    {        return configMapper.selectConfigList(config);    }    @Override    public int insertConfig(SysConfig config)    {        int row = configMapper.insertConfig(config);        if (row > 0)        {            redisCache.setCacheObject(getCacheKey(config.getConfigKey()), config.getConfigValue());        }        return row;    }    @Override    public int updateConfig(SysConfig config)    {        SysConfig temp = configMapper.selectConfigById(config.getConfigId());        if (!StringUtils.equals(temp.getConfigKey(), config.getConfigKey()))        {            redisCache.deleteObject(getCacheKey(temp.getConfigKey()));        }        int row = configMapper.updateConfig(config);        if (row > 0)        {            redisCache.setCacheObject(getCacheKey(config.getConfigKey()), config.getConfigValue());        }        return row;    }    @Override    public void deleteConfigByIds(Long[] configIds)    {        for (Long configId : configIds)        {            SysConfig config = selectConfigById(configId);            if (StringUtils.equals(UserConstants.YES, config.getConfigType()))            {                throw new ServiceException(String.format("{}", config.getConfigKey()));            }            configMapper.deleteConfigById(configId);            redisCache.deleteObject(getCacheKey(config.getConfigKey()));        }    }    @Override    public void loadingConfigCache()    {        List<SysConfig> configsList = configMapper.selectConfigList(new SysConfig());        for (SysConfig config : configsList)        {            redisCache.setCacheObject(getCacheKey(config.getConfigKey()), config.getConfigValue());        }    }    @Override    public void clearConfigCache()    {        Collection<String> keys = redisCache.keys(CacheConstants.SYS_CONFIG_KEY + "*");        redisCache.deleteObject(keys);    }    @Override    public void resetConfigCache()    {        clearConfigCache();        loadingConfigCache();    }    @Override    public boolean checkConfigKeyUnique(SysConfig config)    {        Long configId = StringUtils.isNull(config.getConfigId()) ? -1L : config.getConfigId();        SysConfig info = configMapper.checkConfigKeyUnique(config.getConfigKey());        if (StringUtils.isNotNull(info) && info.getConfigId().longValue() != configId.longValue())        {            return UserConstants.NOT_UNIQUE;        }        return UserConstants.UNIQUE;    }    private String getCacheKey(String configKey)    {        return CacheConstants.SYS_CONFIG_KEY + configKey;    }}